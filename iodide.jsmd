%% fetch
arrayBuffer: lab=https://cors-anywhere.herokuapp.com/https://github.com/schitaytesami/lab/archive/master.zip
arrayBuffer: data=https://cors-anywhere.herokuapp.com/https://github.com/schitaytesami/lab/releases/download/data-v2/2018.npz
%% js
var open_url_binary = (url, then) => fetch(url).then(res => res.arrayBuffer()).then(then);
%% py
import os, sys, io, zipfile
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import js
if not os.path.exists('lab-master'):
    zipfile.ZipFile(io.BytesIO(js.lab)).extractall()
    sys.path.append('lab-master')
import election_data
import square
import bubbles
import history

#matplotlib.rcParams['figure.dpi'] = 50

def reinit_select(id, options, onchange):
	select = js.document.getElementById(id)
	while len(select.options) > 0:
		select.options.remove(0)
	for value, innerText in options:
		option = js.document.createElement('option')
		option.value = value
		option.innerText = innerText
		select.options.add(option)
	select.onchange = lambda event: plot(event.target.value)
	onchange(options[0][0])

def render_datasets(id, datasets):
	def ondatasetloaded(bytes):
		global D, regions
		D = election_data.load(io.BytesIO(bytes))
		regions = list(sorted(np.unique(D.region)))
		reinit_select(id, [('', 'Russia')] + regions, plot)

	def ondatasetchanged(dataset):
		js.open_url_binary(datasets[dataset], ondatasetloaded)
    
	reinit_select(id, [(dataset, dataset) for dataset in sorted(datasets)], ondatasetchanged)
	
def plot(region):
	D_ = election_data.filter(D, region = region)

	plt.figure('square')
	plt.clf()
	square.plot(region or 'Country', D_, binwidth = 0.25)
	plt.show()
	plt.figure('bubbles')
	plt.clf()
	if region:
		bubbles.plot(region, D_)
	plt.show()
	plt.figure('history')
	plt.clf()
	history.plot(region or 'Country', D_, binwidth = 0.25)
	plt.show()
%% py
datasets = {
	'2018/03/18 - Russia, presidential elections' : 'https://cors-anywhere.herokuapp.com/https://github.com/schitaytesami/lab/releases/download/data-v2/2018.npz'
}
D = None
regions = None

%% md
<h1>Select a dataset</h1>
<select id="datasets" style="width:100%"></select>
<select id="regions" style="width:100%"></select>
<h1>Voting result and turnout</h1>
%% py
plt.figure('square'); plt.show()
%% md
<h1>Sorted voting stations</h1>
%% py
plt.figure('bubbles'); plt.show()
%% md
<h1>Turnout dynamics</h1>
%% py
plt.figure('history'); plt.show()
%% py
render_datasets('datasets', datasets)
